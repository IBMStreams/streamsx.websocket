/*
==============================================
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2020, 2023
==============================================
*/

/*
==============================================
First created on: May/20/2020
Last modified on: Mar/16/2023

This application is a companion application that must be used while
demonstrating the "result/response to the remote WS/HTTP clients"
feature of the WebSocketSource operator available in the streamsx.websocket 
toolkit. This application here simply provides WebSocket and HTTP clients 
that are needed to test the other main composite i.e. application 
(WebSocketSourceWithResponseTester) available in the same example project.
It sends text and binary based test data via both WebSocket and
HTTP POST clients.

It is necessary to run this application after running the 
WebSocketSourceWithResponseTester application so that there will be a 
WebSocket or HTTP server available for making the client connections.

Multiple copies of this companion application can be run at the same time to
have multiple WebSocket and HTTP clients to test the ability of the server based 
WebSocketSource operator to support multiple clients. In addition, running
multiple copies of this companion application also allows us to test the
client whitelist feature provided by the WebSocketSource operator.

[
In this example, we also show how to do mutual authentication
i.e. client and server authentication. In the Java based HttpPost 
client operator, we show the use of the Java client side
trust store and key store. In the C++ based WebSocketSendReceive
client operator, we show the use of the trusted server's 
public certificate and the client's private key and its 
public certificate. In a C++ WebSocketSource operator, we show how 
it uses the client's public certificate to do the peer verification.
]

You can build this example from command line via the make command by using the
Makefile available in the top-level directory of this example. Inside that
Makefile, it will be necessary to export the STREAMS_WEBSOCKET_TOOLKIT 
environment variable by pointing it to the full path of your 
streamsx.websocket/com.ibm.streamsx.websocket directory.

If you want to build this example inside the Streams Studio, there are certain
build configuration settings needed. Please refer to the streamsx.websocket
toolkit documentation to learn more about those Streams Studio configuration settings.
==============================================
*/
namespace com.ibm.streamsx.websocket.sample;

// We will use the WebSocketSendReceive operator from this namespace. 
// [Inside the IBM Streams Studio, it is necessary to make the
//  com.ibm.streamsx.websocket as a dependency for this example SPL project.]
// [If you are building this example outside of Streams Studio, then
//  you have to do what is necessary inside the Makefile as explained in 
//  the previous commentary block.]
use com.ibm.streamsx.websocket.op::*;

composite WebSocketHttpClientApp {
	param
		// WebSocket connectivity related submission time values are defined below.
		//
		// URL of the remote WebSocket server must be specified at the time of
		// launching this application.
		expression<rstring> $url : getSubmissionTimeValue("url");
		// Please refer to the following file in the etc sub-directory of 
		// this application for details about client-side and server-side certificates:
		// etc/creating-a-self-signed-certificate.txt
		expression<rstring> $certificateFileName :
			getSubmissionTimeValue("certificateFileName", "");
		// Is a password needed for the private key in the certificate file?
		expression<rstring> $certificatePassword : 
			getSubmissionTimeValue("certificatePassword", "");
		// Do you want to specifiy a file name that contains the public certificate of
		// the trusted remote server. If this file name is not empty, then the
		// WebSocketSendReceive operator will perform a server authentication.
		expression<rstring> $trustedServerCertificateFileName :
			getSubmissionTimeValue("trustedServerCertificateFileName", "");	
		// Do you want to specify a list of identifiers present in the 
		// trusted server's X509 certificate's subject line. If that certificate is
		// self signed, then it will help during the server authentication to approve
		// that server's identity as a known one.
		// 
		// Following are some examples of the subject line as it appears in an X509 public certificate.
		// /C=US/ST=NY/L=Yorktown Heights/O=IBM/OU=AI/CN=websocket.streams/emailAddress=websocket.streams@ibm.com
		// /C=US/O=Let's Encrypt/CN=Let's Encrypt Authority X3
		// /C=BE/O=GlobalSign nv-sa/CN=GlobalSign CloudSSL CA - SHA256 - G3
		// /C=US/O=Google Trust Services/CN=GTS CA 1O1
		// /C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert Global Root CA
		// /C=US/ST=New York/L=Armonk/O=IBM/CN=www.ibm.com
		//
		// So your value for this submission time parameter can be as shown here.
		// ['emailAddress=websocket.streams@ibm.com', 'CN=www.ibm.com']
		expression<list<rstring>> $trustedServerX509SubjectIdentifiers :
			(list<rstring>)getSubmissionTimeValue("trustedServerX509SubjectIdentifiers", "[]");
		// Is live metrics needed for the WebSocketSendReceive operator?
		expression<boolean> $websocketLiveMetricsUpdateNeeded : 
			(boolean)getSubmissionTimeValue("websocketLiveMetricsUpdateNeeded", "true");
		// Is WebSocket library low level logging needed?
		expression<boolean> $websocketLoggingNeeded : 
			(boolean)getSubmissionTimeValue("websocketLoggingNeeded", "false");
		// Is WebSocket server connection logging needed?
		expression<boolean> $wsConnectionLoggingNeeded : 
			(boolean)getSubmissionTimeValue("wsConnectionLoggingNeeded", "false");
		// Is client message exchange logging needed for debugging?
		expression<boolean> $wsClientSessionLoggingNeeded : 
			(boolean)getSubmissionTimeValue("wsClientSessionLoggingNeeded", "false");
		// Do we want to accept all the TLS server certificates (an insecure option)?
		expression<boolean> $tlsAcceptAllCertificates :
			(boolean)getSubmissionTimeValue("tlsAcceptAllCertificates", "false");
		// Do you want to point to a TLS trust store that has the certificates for
		// the servers that we can trust?
		expression<rstring> $tlsTrustStoreFileOnClientSide : 
			getSubmissionTimeValue("tlsTrustStoreFileOnClientSide", "");
		// Do you have a TLS trust store password?
		expression<rstring> $tlsTrustStorePasswordOnClientSide : 
			getSubmissionTimeValue("tlsTrustStorePasswordOnClientSide", "");
		// Do you want to point to a TLS key store that has the 
		// certificate and private key for the client?
		expression<rstring> $tlsKeyStoreFileOnClientSide :
			getSubmissionTimeValue("tlsKeyStoreFileOnClientSide", "");
		// Do you have a TLS key store password?
		expression<rstring> $tlsKeyStorePasswordOnClientSide :
			getSubmissionTimeValue("tlsKeyStorePasswordOnClientSide", "");
		// Do you have a TLS key password?
		expression<rstring> $tlsKeyPasswordOnClientSide :
			getSubmissionTimeValue("tlsKeyPasswordOnClientSide", "");
		// Do we want HttpsPost to display the status of its POST steps/actions.
		expression<boolean> $logHttpPostActions : 
			(boolean)getSubmissionTimeValue("LogHttpPostActions", "false");
		// Do you want to change the HTTP connection timeout value in seconds?
		expression<int32> $httpTimeout :
			(int32)getSubmissionTimeValue("httpTimeout", "30");
		// Do we want to impose a tiny delay in milliseconds between consecutive HTTP Posts?
		expression<int32> $delayBetweenConsecutiveHttpPosts : 
			(int32)getSubmissionTimeValue("delayBetweenConsecutiveHttpPosts", "0");
		// Do you want to create a persistent (Keep-Alive) HTTP connection?
		expression<boolean> $createPersistentHttpConnection :
			(boolean)getSubmissionTimeValue("createPersistentHttpConnection", "false");		

	type
		// The following is the schema of the first output stream for the
		// WebSocketSendReceive operator. The first two attributes are
		// very important and the other ones are purely optional if some
		// scenarios really require them.
		// rstring strData --> String based data (plain text, JSON and XML) received from the remote server.
		// blob blobData --> Binary based data (audio, video, image etc.) received from the remote server.
		// uint64 totalDataItemsReceived -- Total data items received so far from the remote server.
		// uint64 totalDataBytesReceived --> Number of data bytes received so far from the remote server.
		// uint64 totalDataItemsSent -- Total data items sent so far to the remote server.
		// uint64 totalDataBytesSent --> Number of data bytes sent so far to the remote server.
		ReceivedData_t = rstring strData, blob blobData,  
			uint64 totalDataItemsReceived, uint64 totalDataBytesReceived,
			uint64 totalDataItemsSent, uint64 totalDataBytesSent;
			
		// The following schema is for the second output stream of the
		// WebSocketSendReceive operator. It has two attributes.
		// int32 sendResultCode, rstring sendResultMessage.
      	// sendResultCode will carry a value of  0 on a successful send to the remote server and a
      	// non-zero result in case of an error in sending the data. sendResultMessage will
      	// carry a descriptive message about the send result. Application logic can check these 
      	// output tuple attributes and have additional logic to retransmit a given 
      	// input tuple if it was not sent to the remote server due to an error (e-g: broken connection).
		SendDataResult_t = int32 sendResultCode, rstring sendResultMessage;
		
		// The following schema defines the required attributes for the input stream of
		// the WebSocketSendReceive operator. You can have either one or both of
		// these attributes depending on your needs.
		SendData_t = rstring strData, blob blobData;
		
		// The following schema represents the attributes needed for the
		// simple arithmetic processing logic that will be done by the 
		// other server based application (WebSocketSourceWithResponseTester).
		Calculator_t = int32 x, int32 y, rstring operation, int32 result;
		
		// The following schema is for sending a text or binary based 
		// calculation HTTP request with headers.
		// This schema is for the input stream of the HttpPost operator.
		// These attributes can appear in any positional order.
		// The first three attributes are mandatory. The other two are
		// optional. Please refer to the HttpPost operator documentation for more details.
		CalcRequestHttp_t =  rstring strData, blob blobData, 
			map<rstring, rstring> requestHeaders,
			rstring httpMethod, rstring urlQueryString;
		
		// The following schema is for the output stream of the HttpPost operator.
		HttpPostOutput_t = int32 statusCode, rstring statusMessage,
			map<rstring, rstring> responseHeaders, rstring strData, blob blobData;		

	graph		
		// Let us generate test data required make simple arithmetic
		// calculation requests to the WebSocket/HTTP server running
		// in the remote WebSocketSource operator as part of the
		// other application (WebSocketSourceWithResponseTester).
		(stream<Calculator_t> CalcRequest as CR) 
			as CalcRequestGenerator = FileSource() {
			param
				initDelay: 10.0;
				file: "calc-request.txt";
		}		

		// This operator creates a tuple literal string of the
		// calculation request tuples and then sends it in both
		// text and binary forms via four different output streams.
		// These output streams will be consumed by the corresponding
		// dowstream operators that handle the WebSocket and HTTP POST client traffic.
		(stream<SendData_t> CalcRequestTextWS as CRTW;
		 stream<SendData_t> CalcRequestBinaryWS as CRBW;
		 stream<SendData_t> CalcRequestTextHTTP as CRTH;
		 stream<SendData_t> CalcRequestBinaryHTTP as CRBH) as 
		 CalcRequestTextBinFormatter = Custom(CalcRequest as CR) {
		 	logic
		 		state: {
		 			mutable SendData_t _calcRequestTextWS = {};
		 			mutable SendData_t _calcRequestBinaryWS = {};
		 			mutable SendData_t _calcRequestTextHTTP = {};
		 			mutable SendData_t _calcRequestBinaryHTTP = {};
		 		}
		 		
		 		onTuple CR: {
		 			// Create a tuple literal string.
		 			_calcRequestTextWS.strData = (rstring)CR;
		 			submit(_calcRequestTextWS, CRTW);
		 			
		 			// Creata a binary form of a tuple literal string.
		 			// Simply add 100 to the x value to differentiate the
		 			// binary based calculation WebSocket requests from the 
		 			// text based calculation WebSocket requests.
		 			CR.x += 100;
		 			_calcRequestBinaryWS.blobData = convertToBlob((rstring)CR);
		 			submit(_calcRequestBinaryWS, CRBW);
		 			
		 			// Simply add 100 to the x value to differentiate the
		 			// text based calculation HTTP requests from the other ones.
		 			CR.x += 100;
		 			_calcRequestTextHTTP.strData = (rstring)CR;
		 			submit(_calcRequestTextHTTP, CRTH);
		 			
		 			// Simply add 100 to the x value to differentiate the
		 			// binary based calculation HTTP requests from the other ones.
		 			CR.x += 100;
		 			_calcRequestBinaryHTTP.blobData = convertToBlob((rstring)CR);
		 			submit(_calcRequestBinaryHTTP, CRBH);
		 		}
		 }

		// NOTE:
		// This operator logic is needed only if your application requires
		// data retransmission in case of an error while sending data to a remote 
		// WebSocket server. If data retransmission is not needed, you can comment out this
		// entire Custom operator code block and feed the data coming from the 
		// source operators above directly to the input port of the WebSocketSendReceive 
		// operator below. If you decide to comment out this logic, then you can also comment out  
		// the second (optional) output port in the WebSocketSendReceive operator below.
		//
		// ========= START OF THE CODE BLOCK WITH DATA RETRANSMISSION LOGIC =========
		// Any data item we send to the remote WebSocket server will have a result to
		// indicate whether that data item was sent successfully or not.
		// Let us release the incoming tuples one by one as fast as possible once 
		// we get a successful data send result. If the data sending failed due to 
		// connection error, then we can simply retransmit the tuple that didn't get sent. 
		// This safety measure and retransmission logic is a must instead of trying to 
		// send blindly when there is no WebSocket server active on the other end. 
		// This type of low impact throttling/gating the tuple flow based on the 
		// previous tuple's send result will require special application logic. 
		// The pattern shown here can be adopted in real-life applications.
		// Without this logic to check the data send result, the WebSocketSendReceive
		// operator will not properly do its full duplex task of simultaneously
		// sending and receiving data to/from the remote WebSocket server.
		//
		// Note: Consuming the SDR stream below in the 2nd input port will make the
		// compiler to give a "Feedback Loop" warning which can be ignored.
		//
		(stream<SendData_t> SendData as SD) 
			as DataThrottler = Custom(CalcRequestTextWS, CalcRequestBinaryWS as D; 
			SendDataResult as SDR) {
			logic
				state: {
					mutable map<uint64, SendData_t> _dataToBeSent = {};
					mutable boolean _sendResultPending = false;
					mutable uint64 _tuplesReceivedCnt = 0;
					mutable uint64 _tuplesSentCnt = 0;
					mutable int32 _numberOfWindowPunctuations = 0;
					mutable int32 _numberOfFinalPunctuations = 0;
				}
				
			onTuple D: {
				if(length(D.strData) == 0 && blobSize(D.blobData) == 0ul) {
					// Ignore if the incoming tuple has empty data to be sent out.
					return;
				}
				
				// We will send the data item from here only when there is
				// no pending data send activity i.e. when we are not waiting to get a send result.
				// If there is a pending data send activity, subsequent data will be 
				// sent in the other onTuple block that checks the result of the 
				// previous data send activity.
				//
				// Simply insert into the map state variable.
				insertM(_dataToBeSent, ++_tuplesReceivedCnt, D);
				
				if (_sendResultPending == false) {
					_tuplesSentCnt++;
					
					if (_tuplesSentCnt == 1ul) {
						appTrc(Trace.error, "Sending the first data item to the remote WebSocket server.");
					}
					
					// There is no pending data send activity.
					// So, we can release the oldest tuple waiting to be 
					// sent to the remote server.
					_sendResultPending = true;
					submit(_dataToBeSent[_tuplesSentCnt], SD);
				}
			}

			// Process the send data result.
			// This is the feedback stream coming from the WebSocketSendReceive operator used below.
			onTuple SDR: {
				if (SDR.sendResultCode != 0) {
					// If the previous send activity failed, it will simply retransmit the
					// tuple that couldn't be sent.
					appTrc(Trace.error, "Error in sending data item " + 
						(rstring)_tuplesSentCnt + ". " +  
						"Attempting to the send it again now. Send data result=" + (rstring)SDR);
					// If it is a connection error due to the remote WebSocket server's absence,
					// there is no valid reason to keep retrying immediately and too frequently.
					// It may be a good idea to retry at a slower pace by inducing a wait time that is 
					// suitable for the needs of your application. Additional application logic
					// can also be added to limit the number of retransmission attempts and
					// take a proper action when exceeding that threshold.
					//
					// IMPORTANT TIP
					// -------------
					// It is a good practice for the application logic to backoff and wait for a 
					// reasonable amount of time when there is a connection error with the
					// remote WebSocket server before inputting a tuple again into the WebSocketSendReceive operator.
					// Otherwise, that operator will trigger too many connection attempts on every incoming
					// tuple to send it to the remote server. So, the application
					// logic should make an attempt to wait for a while before attempting to send the
					// data after knowing that there is an ongoing connection problem with the remote server.
					block(10.0);
					submit(_dataToBeSent[_tuplesSentCnt], SD);
				} else {
					// Previous tuple was successfully sent.
					// Remove it from the map state variable.
					if(has(_dataToBeSent, _tuplesSentCnt) == true) { 
						removeM(_dataToBeSent, _tuplesSentCnt);
					}
					
					// Let us send if the next one is available in the waiting list.
					if(size(_dataToBeSent) > 0) {						
						_sendResultPending = true;
						submit(_dataToBeSent[++_tuplesSentCnt], SD);	
					} else {
						// Nothing pending to be sent at this time.
						_sendResultPending = false;
					}
				}
			} 

			onPunct D: {
				// We are going to ignore the punctuation markers sent by the Beacon operator.
				// Because, we don't want any final punctuation marker to stop the normal
				// operation of the downstream WebSocketSendReceive operator.
				// In general, it is a good idea for the WebSocketSendReceive operator below to 
				// keep its persistent WebSocket client connection open until this application is
				// cancelled/stopped/shut down. That will help in receiving the data sent by the
				// remote server based WebSocketSource operator.
				//				
				// Unless the punctuations play a key role in the application behavior,
				// the strategy described above can be followed.
				return;
			}
						
			config
				threadedPort: queue(D, Sys.Wait);
		}
		// ========= END OF THE CODE BLOCK WITH DATA RETRANSMISSION LOGIC =========
		
		// Send a single data item (tuple) to establish a persistent connection with the
		// remote WebSocket server and then start receiving binary data or text data or both 
		// from the remote WebSocketSource operator.
		//
		// NOTE:
		// The second output port below is purely optional to receive the 
		// status of the data sending. If such status report is not needed, you can
		// choose not to have the second output port.
		//
		(stream<ReceivedData_t> ReceivedData as RD;
		 stream<SendDataResult_t> SendDataResult as SDR) 
			as WebSocketDataSenderReceiver = WebSocketSendReceive(SendData) {
			param
				url: $url;
				certificateFileName: $certificateFileName;
				certificatePassword: $certificatePassword;
				trustedServerCertificateFileName: $trustedServerCertificateFileName;
				// Use this only when you have trouble authenticating a server that 
				// has a self signed certificate.
				trustedServerX509SubjectIdentifiers: $trustedServerX509SubjectIdentifiers;
				websocketLiveMetricsUpdateNeeded: $websocketLiveMetricsUpdateNeeded;
				websocketLoggingNeeded: $websocketLoggingNeeded;
				wsConnectionLoggingNeeded: $wsConnectionLoggingNeeded;
				wsClientSessionLoggingNeeded: $wsClientSessionLoggingNeeded;
			
			// Get these values via custom output functions	provided by this operator.
			output
			    // strData and/or blobData attributes will be automatically
			    // assigned with received data values withing the operator logic.
			    // Other attributes can be assigned manually as done below.
				RD: totalDataItemsReceived = getTotalDataItemsReceived(),
					totalDataBytesReceived = getTotalDataBytesReceived(),
					totalDataItemsSent = getTotalDataItemsSent(),
					totalDataBytesSent = getTotalDataBytesSent();
			
			// A MUST THING TO DO
			// ------------------
			// For the feedback loop logic to work as explained in the
			// commentary above, you must have this placement directive to launch 
			// this operator in its own PE (i.e. Linux process) that is away from 
			// the Custom operator above which is at the other end of the feedback loop.
			// This is done for a valid reason. Infinite recursion occurs when operators with 
			// feedback loops are fused; when the operator submits a tuple to its output port, 
			// the subsequent submit() calls lead to a loop of other submit() calls, 
			// effectively overflowing the call stack. By avoiding this operator from getting 
			// fused, we ensure that it will not lead to deadlocks or stack overflow due to 
			// infinite recursion.			
			config
				placement: partitionIsolation;
		}

		// Let us normalize the received data into string format before sending it
		// to the sink operator below that is used for verifying the received data.
		// In a real-life application, you will deal with the received data according to
		// the needs of the application.
		(stream<ReceivedData_t> CalcResultTextWS as CRTW;
		 stream<ReceivedData_t> CalcResultBinaryWS as CRBW)
			as ReceivedDataNormalizer = Custom(ReceivedData as RD) {
			logic
				onTuple RD: {
					// If we have received binary data, let us normalize it to
					// string so that we can write it to a file in the
					// sink operator below for verifying the results.
					if (blobSize(RD.blobData) > 0ul) {
						RD.strData = convertFromBlob(RD.blobData);
						clearM(RD.blobData);
						submit(RD, CRBW);
					} else {
						submit(RD, CRTW);
					}
				}
		}		

		// Let us write the text based WS calc result received from the remote server to a file.
		() as MySink1 = FileSink(CalcResultTextWS) {
			param
				file: "ws-text-calc-result-" + 
					(rstring)jobID() + "-" + getHostName() + ".txt";
				flush: 1u;
		}

		// Let us write the text based WS calc result received from the remote server to a file.
		() as MySink2 = FileSink(CalcResultBinaryWS) {
			param
				file: "ws-binary-calc-result-" + 
					(rstring)jobID() + "-" + getHostName() + ".txt";
				flush: 1u;
		}

		// We will prepare the calculation request data to be sent via HTTP now.
		(stream<CalcRequestHttp_t> CalcRequestTextHTTPWithHeaders as CRTHWH;
		 stream<CalcRequestHttp_t> CalcRequestBinaryHTTPWithHeaders as CRBHWH) as
		HttpCalcRequestGenerator = Custom(CalcRequestTextHTTP as CRTH;
			CalcRequestBinaryHTTP as CRBH) {
			logic
				state: {
					mutable CalcRequestHttp_t _calcRequestHttp = {};
				}
				
				onTuple CRTH: {
					// Please refer to the HttpPost operator documentation for
					// more details about what attributes are acceptable in its input port.	
					_calcRequestHttp = (CalcRequestHttp_t){};		
					_calcRequestHttp.strData = CRTH.strData;
					// We can also send any application-specific custom HTTP request headers.
					// You must ensure that in a Name:Value formatted HTTP header, 
					// the Name portion can't have spaces in it.
					insertM(_calcRequestHttp.requestHeaders, 
						"Streams-Application-Name", "WebSocketHttpClientApp [Text]");
					insertM(_calcRequestHttp.requestHeaders, 
						"Author", "Peter Pan");
					insertM(_calcRequestHttp.requestHeaders, 
						"Organization", "IBM Research");
					insertM(_calcRequestHttp.requestHeaders, 
						"Location", "Yorktown Heights, NY, USA");
					submit(_calcRequestHttp, CRTHWH);
				}

				onTuple CRBH: {
					// Please refer to the HttpPost operator documentation for
					// more details about what attributes are acceptable in its input port.	
					_calcRequestHttp = (CalcRequestHttp_t){};		
					_calcRequestHttp.blobData = CRBH.blobData;
					// We can also send any application-specific custom HTTP request headers.
					// You must ensure that in a Name:Value formatted HTTP header, 
					// the Name portion can't have spaces in it.
					insertM(_calcRequestHttp.requestHeaders, 
						"Streams-Application-Name", "WebSocketHttpClientApp [Binary]");
					insertM(_calcRequestHttp.requestHeaders, 
						"Author", "Wendy Darling");
					insertM(_calcRequestHttp.requestHeaders, 
						"Organization", "IBM Research");
					insertM(_calcRequestHttp.requestHeaders, 
						"Location", "Almaden, CA, USA");
					submit(_calcRequestHttp, CRBHWH);
				}

				
			config
				threadedPort: queue(CRTH, Sys.Wait), queue(CRBH, Sys.Wait);
		}

		// NOTE
		// ----
		// HTTP POST to the remote WebSocketSource operator will work only if that 
		// operator is configured to allow HTTP POST. If it is not configured, then
		// it will send a HTTP status code of 426 with a status messge of "Upgrade Required" to
		// upgrade to the WebSocket protocol instead of HTTP. So, it is necessary for that 
		// remote operator to accept HTTP POST for the following operator to work correctly.
		//
		// If the URL is wrong or not alive, there will be a "Connection timed out" exception.
		// Let us catch any such exception and continue without crashing this operator.
		@catch(exception=all)
		// Please refer to the HttpPost operator documentation for
		// more details about what attributes are acceptable in its input and output ports.
		(stream<HttpPostOutput_t> CalcResultTextHTTP) as
		 CalcRequestTextHTTPSender = HttpPost(CalcRequestTextHTTPWithHeaders as CR) {
			param
				url: $url;
				// text/plain is the default content type for this operator.
				// It posts only the raw payload.
				// Users can override it to suit their needs.
				contentType: "text/plain";
				//
				// For scenarios that will require HTTP POST body to
				// have the query string format (param=value),
				// the following contentType can be used.
				//
				// contentType: "application/x-www-form-urlencoded";
				//
				// Do you want to accept all the TLS server certificates (an insecure option)?
				tlsAcceptAllCertificates: $tlsAcceptAllCertificates;
				//
				// Do you want to create a persistent (Keep-Alive) HTTP connection?
				createPersistentHttpConnection: $createPersistentHttpConnection;
				//
				/*
				// =============== START OF TLS CONFIGURATION ===============
				// You can enable or disable trust store and key store features of
				// this operator based on your need. Before doing that, please have a 
				// thorough reading of the etc/creating-a-self-signed-certificate.txt file.
				// 
				// Do you want to point to a TLS trust store that has the certifiactes for
				// the servers that we can trust?
				tlsTrustStoreFile: getThisToolkitDir() + "/etc/" + 
					$tlsTrustStoreFileOnClientSide;
				//
				// Do you have a trust store password?
				tlsTrustStorePassword: $tlsTrustStorePasswordOnClientSide;
				//
				// Do you want to point to a TLS key store that has the 
				// certificate and private key for the client?
				tlsKeyStoreFile: getThisToolkitDir() + "/etc/" + 
					$tlsKeyStoreFileOnClientSide;
				//
				// Do you have a TLS key store password?
				tlsKeyStorePassword: $tlsKeyStorePasswordOnClientSide;
				//
				// Do you have a TLS key password?
				tlsKeyPassword: $tlsKeyPasswordOnClientSide;
				// =============== END OF TLS CONFIGURATION ===============
				*/
				//
				// Do you want to log the individual steps/tasks/actions performed during the HTTP POST?
				logHttpPostActions: $logHttpPostActions;
				//
				// If you get frequent connection timeouts, it is necessary to
				// increase it to a higher value than the default of 30 seconds.
				httpTimeout: $httpTimeout;
				//				
				// Impose a tiny delay in milliseconds between continously happening  
				// non-stop HTTP POSTs at a faster pace. HTTP POST in general is not 
				// meant for that kind of high speed message exchanges. This minor delay 
				// between consecutive posts will avoid opening too many quick 
				// connections to the remote Web Server. That helps in not getting 
				// connection refused errors.
				// A delay of 10 milliseconds between every HTTP POST is a good place to start.
				// Default is 0 for no delay. You may use it as needed.
				delayBetweenConsecutiveHttpPosts: $delayBetweenConsecutiveHttpPosts;
		}

		// Let us write the text based HTTP calc result received from the remote server to a file.
		() as MySink3 = FileSink(CalcResultTextHTTP) {
			param
				file: "http-text-calc-result-" + 
					(rstring)jobID() + "-" + getHostName() + ".txt";
				flush: 1u;
		}

		// NOTE
		// ----
		// HTTP POST to the remote WebSocketSource operator will work only if that 
		// operator is configured to allow HTTP POST. If it is not configured, then
		// it will send a HTTP status code of 426 with a status messge of "Upgrade Required" to
		// upgrade to the WebSocket protocol instead of HTTP. So, it is necessary for that 
		// remote operator to accept HTTP POST for the following operator to work correctly.
		//
		// If the URL is wrong or not alive, there will be a "Connection timed out" exception.
		// Let us catch any such exception and continue without crashing this operator.
		@catch(exception=all)
		// Please refer to the HttpPost operator documentation for
		// more details about what attributes are acceptable in its input and output ports.
		(stream<HttpPostOutput_t> CalcResultBinaryHTTP) as
		 CalcRequestBinaryHTTPSender = HttpPost(CalcRequestBinaryHTTPWithHeaders as CR) {
			param
				url: $url;
				// application/octet-stream is the required content type for 
				// this operator to post the payload as binary data.
				// Users can also override it to suit their other needs such as
				// text/plain or application/json or application/xml.
				contentType: "application/octet-stream";
				//
				// For scenarios that will require HTTP POST body to
				// have the query string format (param=value),
				// the following contentType can be used.
				//
				// contentType: "application/x-www-form-urlencoded";
				//
				// Do you want to accept all the TLS server certificates (an insecure option)?
				tlsAcceptAllCertificates: $tlsAcceptAllCertificates;
				//
				/*
				// =============== START OF TLS CONFIGURATION ===============
				// You can enable or disable trust store and key store features of
				// this operator based on your need. Before doing that, please have a 
				// thorough reading of the etc/creating-a-self-signed-certificate.txt file.
				// 
				// Do you want to point to a TLS trust store that has the certifiactes for
				// the servers that we can trust?
				tlsTrustStoreFile: getThisToolkitDir() + "/etc/" + 
					$tlsTrustStoreFileOnClientSide;
				//
				// Do you have a trust store password?
				tlsTrustStorePassword: $tlsTrustStorePasswordOnClientSide;
				//
				// Do you want to point to a TLS key store that has the 
				// certificate and private key for the client?
				tlsKeyStoreFile: getThisToolkitDir() + "/etc/" + 
					$tlsKeyStoreFileOnClientSide;
				//
				// Do you have a TLS key store password?
				tlsKeyStorePassword: $tlsKeyStorePasswordOnClientSide;
				//
				// Do you have a TLS key password?
				tlsKeyPassword: $tlsKeyPasswordOnClientSide;
				// =============== END OF TLS CONFIGURATION ===============
				*/
				//
				// Do you want to log the individual steps/tasks/actions performed during the HTTP POST?
				logHttpPostActions: $logHttpPostActions;
				//
				// If you get frequent connection timeouts, it is necessary to
				// increase it to a higher value than the default of 30 seconds.
				httpTimeout: $httpTimeout;
				//	
				// Impose a tiny delay in milliseconds between continously happening  
				// non-stop HTTP POSTs at a faster pace. HTTP POST in general is not 
				// meant for that kind of high speed message exchanges. This minor delay 
				// between consecutive posts will avoid opening too many quick 
				// connections to the remote Web Server. That helps in not getting 
				// connection refused errors.
				// A delay of 10 milliseconds between every HTTP POST is a good place to start.
				// Default is 0 for no delay. You may use it as needed.
				delayBetweenConsecutiveHttpPosts: $delayBetweenConsecutiveHttpPosts;
		}

		// Let us transform the binary calc result into text format sutable for
		// writing to a viewable file.
		(stream<HttpPostOutput_t> TransformedCalcResultBinaryHTTP as TCRBH) as 
			BinaryHTTPCalcResultTransformer = Custom(CalcResultBinaryHTTP as CRBH) {
			logic
				onTuple CRBH: {
					if (CRBH.statusCode == 200) {
						// This is HTTP 200 OK.
						// We should have a binary response from the remote web server. 
						// Bring that binary response into a string form in the other
						// strData attribute so that we can write the result to a file below.
						// This is done purely for being to view the received binary content.
						// In a real-life application, this need not be done.
						CRBH.strData = convertFromBlob(CRBH.blobData);
					}
					
					clearM(CRBH.blobData);
					submit(CRBH, TCRBH);
				}	
		}

		// Let us write the binary based HTTP calc result received from the remote server to a file.
		() as MySink4 = FileSink(TransformedCalcResultBinaryHTTP) {
			param
				file: "http-binary-calc-result-" + 
					(rstring)jobID() + "-" + getHostName() + ".txt";
				flush: 1u;
		}
}
