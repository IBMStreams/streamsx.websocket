/*
==============================================
# Licensed Materials - Property of IBM
# Copyright IBM Corp. 2020, 2023
==============================================
*/

/*
==================================================================
First created on: Feb/13/2020
Last modified on: Oct/04/2023

This main composite file contains the logic to send
a payload (plain text, JSON or XML) to a given HTTP(S) endpoint.
This application is mainly used to test the WebSocketSource
operator in the streamsx.websocket toolkit by sending data via
HTTP(S) PUT and POST. In order to send the data, it also uses another
utility operator named HttpPost available in that same 
streamsx.websocket toolkit.

In May/2020, I added a feature to send/receive binary data
via HTTP POST to/from the WebSocketSource operator.
So, I extended this example application to showcase the 
binary data posting/sending using the HttpPost client operator. 

In addition to PUT and POST, this example also shows how to do
HTTP GET using the HttpPost client operator. 

[
In this example, we also show how to do mutual authentication
i.e. client and server authentication. In the Java based HttpPost 
client operator, we show the use of Java client side
trust store and key store. In a C++ WebSocketSource operator,
we show how it uses the client's public certificate to do the peer verification.
]

This test application can be built using the Makefile available
in this example directory.

make clean
make

NOTE: There is a run-http-post-test.sh script available in the etc sub-directory of this
example project. That convenience script can be modified to suit your needs and run
this application along with a WebSocket server application running on a different
IBM Streams instance. That will test the HttpPost operator's capabilities to send and
receive text/binary data to/from the WebSocketSource.
==================================================================
*/
namespace com.ibm.streamsx.websocket.sample;

use com.ibm.streamsx.websocket.op::*;

// This is a main composite.
composite HttpPostTester {
	param
		// XML Payload is 2.5KB in size.
		expression<rstring> $XML_PAYLOAD : 
			'<?xml version="1.0" encoding="UTF-8"?>' +  
			'<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://www.ibm.com/wbe/casoap/types" xmlns:xs="http://www.w3.org/2001/XMLSchema">
' +
			'<soapenv:Header />' +
			'<soapenv:Body>' +
			'<typ:PowerOutageNotification>' +
			'<EndDeviceEvent>' +
			'<CorrelationID>41b405a6-5b56-45d1-a1f7-f209dc0a26b1</CorrelationID>' +
			'<meterId>999_E_meter</meterId>' +
			'<transformerId />' +
			'<circuitId />' +
			'<meterTimestamp>2020-01-13T00:24:51.078</meterTimestamp>' +
			'<headendTimestamp>2020-01-13T00:24:51.079</headendTimestamp>' +
			'<alarmType>3.26.1.185</alarmType>' +
			'<alarmPayload>PG06TWV0ZXJBbGFybSB4bWxuczptPSJodHRwOi8vbWV0ZXJhbGFybS5lc20uZHRlY28uY29tL3YyIyI+PEhlYWRlciB4bWxucz0iaHR0cDovL2VzbS5kdGVjby5jb20vY29tbW9uL3YxIj48VmVyYj5jcmVhdGVkPC9WZXJiPjxOb3VuPkVuZERldmljZUV2ZW50PC9Ob3VuPjxUaW1lc3RhbXA+MjAyMC0wMS0xM1QwODoyNDo1MVo8L1RpbWVzdGFtcD48U291cmNlPkVTQjwvU291cmNlPjxNZXNzYWdlSUQ+MzY5M2Y2ZDktMTIzOC00YWNmLWEzMTQtZjIwOWRjMGE0YmQ0PC9NZXNzYWdlSUQ+PENvcnJlbGF0aW9uSUQ+NDFiNDA1YTYtNWI1Ni00NWQxLWExZjctZjIwOWRjMGEyNmIxPC9Db3JyZWxhdGlvbklEPjwvSGVhZGVyPjxFbmREZXZpY2VFdmVudHMgeG1sbnM9Imh0dHA6Ly9pZWMuY2gvVEM1Ny8yMDExL0VuZERldmljZUV2ZW50cyMiPjxFbmREZXZpY2VFdmVudD48Y3JlYXRlZERhdGVUaW1lPjIwMjAtMDEtMTNUMDA6MjQ6NTEuMDc5PC9jcmVhdGVkRGF0ZVRpbWU+PGlzc3VlcklEPkl0cm9uPC9pc3N1ZXJJRD48aXNzdWVyVHJhY2tpbmdJRD4xODAwMTwvaXNzdWVyVHJhY2tpbmdJRD48QXNzZXRzPjxtUklEPjk5OV9FX21ldGVyPC9tUklEPjxOYW1lcz48bmFtZT45OTlfRV9tZXRlcjwvbmFtZT48TmFtZVR5cGU+PGRlc2NyaXB0aW9uPkVsZWN0cm9uaWMgU2VyaWFsIE51bWJlcjwvZGVzY3JpcHRpb24+PG5hbWU+RVNOPC9uYW1lPjwvTmFtZVR5cGU+PC9OYW1lcz48L0Fzc2V0cz48RW5kRGV2aWNlRXZlbnREZXRhaWxzPjxuYW1lPlRyYW5zZm9ybWVySUQ8L25hbWU+PHZhbHVlIHJlZj0iIi8+PC9FbmREZXZpY2VFdmVudERldGFpbHM+PEVuZERldmljZUV2ZW50RGV0YWlscz48bmFtZT5DaXJjdWl0SUQ8L25hbWU+PHZhbHVlIHJlZj0iIi8+PC9FbmREZXZpY2VFdmVudERldGFpbHM+PEVuZERldmljZUV2ZW50RGV0YWlscz48bmFtZT5WZW5kb3JBbGFybUNhdGVnb3J5PC9uYW1lPjx2YWx1ZSByZWY9IlBvd2VyT3V0YWdlT3JSZXN0b3JhdGlvbiIvPjwvRW5kRGV2aWNlRXZlbnREZXRhaWxzPjxFbmREZXZpY2VFdmVudERldGFpbHM+PG5hbWU+VmVuZG9yQWxhcm1OYW1lPC9uYW1lPjx2YWx1ZSByZWY9IlByaW1hcnkgUG93ZXIgVXAiLz48L0VuZERldmljZUV2ZW50RGV0YWlscz48RW5kRGV2aWNlRXZlbnRUeXBlIHJlZj0iMy4yNi4xLjIxNiIvPjxzdGF0dXM+PGRhdGVUaW1lPjIwMjAtMDEtMTNUMDA6MjQ6NTEuMDc4PC9kYXRlVGltZT48L3N0YXR1cz48VXNhZ2VQb2ludD48bVJJRC8+PC9Vc2FnZVBvaW50PjwvRW5kRGV2aWNlRXZlbnQ+PC9FbmREZXZpY2VFdmVudHM+PC9tOk1ldGVyQWxhcm0+</alarmPayload>
' +
			'</EndDeviceEvent>' +
			'</typ:PowerOutageNotification>' +
			'</soapenv:Body>' +
			'</soapenv:Envelope>';
		
		// User can configure the number of senders they want to
		// use for pushing the XML payload in parallel.
		expression<int32> $numSenders : 
			(int32)getSubmissionTimeValue("NumSenders", "1");
		
		// User must provide the URL for the HTTP endpoint.
		expression<rstring> $url : getSubmissionTimeValue("Url");
		
		// Do we want to accept all the TLS server certificates (an insecure option)?
		expression<boolean> $tlsAcceptAllCertificates :
			(boolean)getSubmissionTimeValue("tlsAcceptAllCertificates", "false");

		// Do you want to point to a TLS trust store that has the certificates for
		// the servers that we can trust?
		expression<rstring> $tlsTrustStoreFileOnClientSide : 
			getSubmissionTimeValue("tlsTrustStoreFileOnClientSide", "");
			
		// Do you have a TLS trust store password?
		expression<rstring> $tlsTrustStorePasswordOnClientSide : 
			getSubmissionTimeValue("tlsTrustStorePasswordOnClientSide", "");
		
		// Do you want to point to a TLS key store that has the 
		// certificate and private key for the client?
		expression<rstring> $tlsKeyStoreFileOnClientSide :
			getSubmissionTimeValue("tlsKeyStoreFileOnClientSide", "");
			
		// Do you have a TLS key store password?
		expression<rstring> $tlsKeyStorePasswordOnClientSide :
			getSubmissionTimeValue("tlsKeyStorePasswordOnClientSide", "");
			
		// Do you have a TLS key password?
		expression<rstring> $tlsKeyPasswordOnClientSide :
			getSubmissionTimeValue("tlsKeyPasswordOnClientSide", "");
		
		// Do we want HttpsPost to display the status of its POST steps/actions.
		expression<boolean> $logHttpPostActions : 
			(boolean)getSubmissionTimeValue("LogHttpPostActions", "false");

		// Do you want to change the HTTP connection timeout value in seconds?
		expression<int32> $httpTimeout :
			(int32)getSubmissionTimeValue("httpTimeout", "30");

		// Do we want to impose a tiny delay in milliseconds between consecutive HTTP Posts?
		expression<int32> $delayBetweenConsecutiveHttpPosts : 
			(int32)getSubmissionTimeValue("delayBetweenConsecutiveHttpPosts", "0");
		
		// Do you want to create a persistent (Keep-Alive) HTTP connection?
		expression<boolean> $createPersistentHttpConnection :
			(boolean)getSubmissionTimeValue("createPersistentHttpConnection", "false");		

		// Do you want to retry PUT, POST or GET operation if it encounters an error?
		expression<int32> $maxRetryAttempts :
			(int32)getSubmissionTimeValue("maxRetryAttempts", "0");		

		// Do you want to wait between retry attempts for PUT, POST or GET operation?
		expression<int32> $waitTimeBetweenRetry :
			(int32)getSubmissionTimeValue("waitTimeBetweenRetry", "2000");		
			
		// What is the desired message rate we want to test with.
		expression<float64> $maxMessageRate : 
			(float64)getSubmissionTimeValue("MaxMessageRate", "500.00");
		
		// Number of seconds during which to assemble a batch of 
		// incoming payload (XML or JSON) messages and then send it via HTTP POST.
		expression<float64> $messageBatchingTime : 
			(float64)getSubmissionTimeValue("MessageBatchingTime", "5.0");
			
		// How many data items we want to send to the remote server?
		expression<uint32> $numberOfDataItemsToBeSent :
			(uint32)getSubmissionTimeValue("numberOfDataItemsToBeSent", "10000");
			
	type
		// Schema for the input stream of the HttpPost operator.
		// These attributes can appear in any positional order.
		// The first three attributes are mandatory. The other two are
		// optional. By default, the HttpPost operator will always do
		// HTTP POST. Optionally, that operator can be made to do 
		// HTTP PUT or HTTP GET by setting the httpMethod attribute 
		// below to "PUT" or "GET".
		// Please refer to the HttpPost operator documentation for more details.
		HttpPostInput_t = rstring strData, blob blobData, 
			map<rstring, rstring> requestHeaders, 
			rstring httpMethod, rstring urlQueryString;
			
		// Schema for the output stream of the HttpPost operator.
		HttpPostOutput_t = int32 statusCode, rstring statusMessage,
			map<rstring, rstring> responseHeaders, rstring strData, blob blobData;
					
	graph
		// Keep generating user configured number of tuples as fast as 
		// possible carrying binary payload.
		// These data items will be sent via HTTP POST.
		(stream<HttpPostInput_t> MyHttpPostBinaryPayload as BP) = Beacon() {
			param
				initDelay: 10.0;
				iterations: $numberOfDataItemsToBeSent;
				
			output
				BP: blobData = convertToBlob("0123456789" +
					"ABCDEFGHIJKLMNOPQRSTUVWXYZ" + 
					"abcdefghijklmnopqrstuvwxyz" +
					"~!@#$%^&*()_+`-=,.?/;:" +
					"IT IS TIME FOR ALL THE GOOD MEN AND WOMEN TO COME TO THE AID OF OUR NATION" +
					"QUICK BROWN FOX JUMPS OVER THE LAZY DOG" +
					"TIME BRINGS EVERYTHING" +
					"TIME KEEPS EVERYTHING" +
					"TIME TAKES AWAY EVERYTHING");
		}
	
		// Keep generating user configured number of tuples as fast as 
		// possible carrying the XML payload.
		// These data items will be sent via HTTP PUT.
		(stream<rstring strData> Payload) = Beacon() {
			param
				initDelay: 10.0;
				iterations: $numberOfDataItemsToBeSent;
				
			output
				Payload: strData = $XML_PAYLOAD;
		}

		// Keep generating a few tuples as fast as 
		// possible carrying data via the URL query string.
		// These data items will be sent via HTTP GET.
		(stream<HttpPostInput_t> MyHttpGetPayload as HP) = Beacon() {
			param
				initDelay: 10.0;
				iterations: 20;
				
			output
				// In HTTP GET, we can't send anything via strData and blobData attributes.
				// Instead, it has to be sent via a URL query string.
				HP: requestHeaders = {'Custom-Header1':'Hawthorne', 
					'Custom-Header2':'Yorktown Heights', 'Custom-Header3':'Chappaqua'},
					httpMethod = "GET", 
					urlQueryString="NY=Albany&CT=Hartford&NJ=Trenton&RI=Providence";
		}
		
		// This operator sends a periodic timer signal to 
		// send a batch of messages collected during that period.
		(stream<boolean signal> MessageBatchTimer) = Beacon() {
			param
				period: $messageBatchingTime;
		} 
		
		// Throttle the incoming messages to meet the rate per second that we need.
		(stream<Payload> ThrottledPayload) = Throttle(Payload) {
			param
				rate: $maxMessageRate;
		}
		
		// This operator collects the incoming tuples for a specific 
		// period of time and then sends that collected batch of tuples for
		// HTTP POST targeted to a remote web server.
		(stream<HttpPostInput_t> MyHttpPutPayload as MP) = 
			Custom(ThrottledPayload as TP; MessageBatchTimer as MBT) {
			logic
				state: {
					mutable list<rstring> _msgList = [];
					mutable uint64 _batchCnt = 0ul;
					mutable HttpPostInput_t _oTuple = {};
				}
				
				// Keep collecting the incoming messages in a list.
				onTuple TP: {
					// Simply insert in the message list and leave.
					// Collected messages will be sent periodically in a batch when
					// receiving a timer signal.
					//
					// If you don't want to do batching of messages, you can
					// change the logic in this operator to send every message on
					// their own without inserting into a list.
					appendM(_msgList, TP.strData);
				}
				
				// When this timer signal arrives, we will send a 
				// batch of messages as a single tuple to the downstream operator.
				onTuple MBT: {
					int32 msgCnt = size(_msgList);

					// If there is nothing in the list, return now.					
					if(msgCnt <= 0) {
						return;
					}
					
					++_batchCnt;
					
					// We can now send a batch of messages via a single HTTP POST.
					if ($logHttpPostActions == true) {
						printStringLn((rstring)_batchCnt + ") " + 
							(rstring)msgCnt + 
							" messages are ready to be sent with a total size of " +
							(rstring)length((rstring)_msgList) + ".");
					}
					
					// Convert the entire list as a string i.e. "['abc', 'rst', 'xyz']"
					// Please refer to the HttpPost operator documentation for
					// more details about what attributes are acceptable in its input port.
					_oTuple = (HttpPostInput_t){};
					_oTuple.strData = (rstring)_msgList;
					// By default, the HttpPost operator will always do HTTP POST.
					// Optionally, we can make that operator to do HTTP PUT as well.
					// That can be done by setting the httpMethod attribute to PUT.
					_oTuple.httpMethod = "PUT";
					
					// We can also send any application-specific custom HTTP request headers.
					insertM(_oTuple.requestHeaders, "Streams-Application-Name", "HttpPostTester");
					insertM(_oTuple.requestHeaders, "Author", "Peter Pan");
					insertM(_oTuple.requestHeaders, "Organization", "IBM Research");
					insertM(_oTuple.requestHeaders, "Location", "Yorktown Heights, NY, USA");
					// Clear the list.
					clearM(_msgList);
					submit(_oTuple, MP);
				}
		
			config
				threadedPort: queue(TP, Sys.Wait), queue(MBT, Sys.Wait);
		}

		// Use as many copies of this operator to push the 
		// payload to the remote HTTP(S) endpoint.
		//
		// The following Java utility operator available in the
		// streamsx.websocket toolkit can do the HTTPS (SSL) POST at a 
		// faster rate (200 posts per second). 
		// For the HTTP (non-SSL) POST, this utility Java operator can 
		// give a post rate of 1500 per second. 
		// 		
		// Please refer to the HttpPost operator documentation for
		// more details about what attributes are acceptable in its input and output ports.
		//
		@parallel(width=$numSenders)
		// If the URL is wrong or not alive, there will be a "Connection timed out" exception.
		// Let us catch any such exception and continue without crashing this operator.
		@catch(exception=all)
		// Please refer to the HttpPost operator documentation for
		// more details about what attributes are acceptable in its input and output ports.
		// This operator will carry both the HTTP PUT and HTTP GET payload.
		(stream<HttpPostOutput_t> GetPutResult) as
			TextPayloadHttpSender = HttpPost(MyHttpGetPayload, MyHttpPutPayload as MP) {
			param
				url: $url;
				// text/plain is the default content type for this operator.
				// It posts only the payload.
				// application/octet-stream is the required content type for 
				// this operator to post the payload as binary data.
				// Users can also override it to suit their other needs such as
				// application/json or application/xml.
				// Users can override it to suit their needs.
				contentType: "text/plain";
				//
				// For scenarios that will require HTTP POST body to
				// have the query string format (param=value),
				// the following contentType can be used.
				//
				// contentType: "application/x-www-form-urlencoded";
				//
				// Do you want to accept all the TLS server certificates (an insecure option)?
				tlsAcceptAllCertificates: $tlsAcceptAllCertificates;
				//
				// Do you want to create a persistent (Keep-Alive) HTTP connection?
				createPersistentHttpConnection: $createPersistentHttpConnection;
				//
				/*
				// =============== START OF TLS CONFIGURATION ===============
				// You can enable or disable trust store and key store features of
				// this operator based on your need. Before doing that, please have a 
				// thorough reading of the etc/creating-a-self-signed-certificate.txt file.
				// 
				// Do you want to point to a TLS trust store that has the certifiactes for
				// the servers that we can trust?
				tlsTrustStoreFile: getThisToolkitDir() + "/etc/" + 
					$tlsTrustStoreFileOnClientSide;
				//
				// Do you have a trust store password?
				tlsTrustStorePassword: $tlsTrustStorePasswordOnClientSide;
				//
				// Do you want to point to a TLS key store that has the 
				// certificate and private key for the client?
				tlsKeyStoreFile: getThisToolkitDir() + "/etc/" + 
					$tlsKeyStoreFileOnClientSide;
				//
				// Do you have a TLS key store password?
				tlsKeyStorePassword: $tlsKeyStorePasswordOnClientSide;
				//
				// Do you have a TLS key password?
				tlsKeyPassword: $tlsKeyPasswordOnClientSide;
				// =============== END OF TLS CONFIGURATION ===============
				*/
				//
				// Do you want to log the individual steps/tasks/actions performed during the HTTP POST?
				logHttpPostActions: $logHttpPostActions;
				//
				// If you get frequent connection timeouts, it is necessary to
				// increase it to a higher value than the default of 30 seconds.
				httpTimeout: $httpTimeout;
				//
				// Impose a tiny delay in milliseconds between continously happening  
				// non-stop HTTP POSTs at a faster pace. HTTP POST in general is not 
				// meant for that kind of high speed message exchanges. This minor delay 
				// between consecutive posts will avoid opening too many quick 
				// connections to the remote Web Server. That helps in not getting 
				// connection refused errors.
				// A delay of 50 milliseconds between every HTTP POST is a good place to start.
				delayBetweenConsecutiveHttpPosts: $delayBetweenConsecutiveHttpPosts;
				//
				// Do you want to retry PUT, POST or GET operation if it encounters an error?
				maxRetryAttempts: $maxRetryAttempts;
				//		
				// Do you want to wait between retry attempts for PUT, POST or GET operation?
				waitTimeBetweenRetry: $waitTimeBetweenRetry;
		}

		// We can write the HTTP response somewhere or nowhere.
		() as TextHttpResponseSink = FileSink(GetPutResult as GPR) {
			param
				file: "http-text-payload-send-result-" + 
					(rstring)jobID() + "-" + getHostName() + ".txt";
				flush: 1u;
		}
		
		// NOTE
		// ----
		// HTTP POST to the remote WebSocketSource operator will work only if that 
		// operator is configured to allow HTTP POST. If it is not configured, then
		// it will send a HTTP status code of 426 with a status messge of "Upgrade Required" to
		// upgrade to the WebSocket protocol instead of HTTP. So, it is necessary for that 
		// remote operator to accept HTTP POST for the following operator to work correctly.
		//
		// If the URL is wrong or not alive, there will be a "Connection timed out" exception.
		// Let us catch any such exception and continue without crashing this operator.
		@catch(exception=all)
		// Please refer to the HttpPost operator documentation for
		// more details about what attributes are acceptable in its input and output ports.
		// This operator will carry the HTTP POST payload.
		(stream<HttpPostOutput_t> BinaryPayloadSendResult) as
		 	BinaryPayloadSender = HttpPost(MyHttpPostBinaryPayload as BP) {
			param
				url: $url;
				// application/octet-stream is the required content type for 
				// this operator to post the payload as binary data.
				// Users can also override it to suit their other needs such as
				// text/plain or application/json or application/xml.
				contentType: "application/octet-stream";
				//
				// For scenarios that will require HTTP POST body to
				// have the query string format (param=value),
				// the following contentType can be used.
				//
				// contentType: "application/x-www-form-urlencoded";
				//
				// Do you want to accept all the TLS server certificates (an insecure option)?
				tlsAcceptAllCertificates: $tlsAcceptAllCertificates;
				//
				// Do you want to create a persistent (Keep-Alive) HTTP connection?
				createPersistentHttpConnection: $createPersistentHttpConnection;
				//
				/*
				// =============== START OF TLS CONFIGURATION ===============
				// You can enable or disable trust store and key store features of
				// this operator based on your need. Before doing that, please have a 
				// thorough reading of the etc/creating-a-self-signed-certificate.txt file.
				// 
				// Do you want to point to a TLS trust store that has the certifiactes for
				// the servers that we can trust?
				tlsTrustStoreFile: getThisToolkitDir() + "/etc/" + 
					$tlsTrustStoreFileOnClientSide;
				//
				// Do you have a trust store password?
				tlsTrustStorePassword: $tlsTrustStorePasswordOnClientSide;
				//
				// Do you want to point to a TLS key store that has the 
				// certificate and private key for the client?
				tlsKeyStoreFile: getThisToolkitDir() + "/etc/" + 
					$tlsKeyStoreFileOnClientSide;
				//
				// Do you have a TLS key store password?
				tlsKeyStorePassword: $tlsKeyStorePasswordOnClientSide;
				//
				// Do you have a TLS key password?
				tlsKeyPassword: $tlsKeyPasswordOnClientSide;
				// =============== END OF TLS CONFIGURATION ===============
				*/
				//
				// Do you want to log the individual steps/tasks/actions performed during the HTTP POST?
				logHttpPostActions: $logHttpPostActions;
				//
				// If you get frequent connection timeouts, it is necessary to
				// increase it to a higher value than the default of 30 seconds.
				httpTimeout: $httpTimeout;
				//
				// Impose a tiny delay in milliseconds between continously happening  
				// non-stop HTTP POSTs at a faster pace. HTTP POST in general is not 
				// meant for that kind of high speed message exchanges. This minor delay 
				// between consecutive posts will avoid opening too many quick 
				// connections to the remote Web Server. That helps in not getting 
				// connection refused errors.
				// A delay of 10 milliseconds between every HTTP POST is a good place to start.
				// Default is 0 for no delay. You may use it as needed.
				delayBetweenConsecutiveHttpPosts: $delayBetweenConsecutiveHttpPosts;
				//
				// Do you want to retry PUT, POST or GET operation if it encounters an error?
				maxRetryAttempts: $maxRetryAttempts;
				//		
				// Do you want to wait between retry attempts for PUT, POST or GET operation?
				waitTimeBetweenRetry: $waitTimeBetweenRetry;
		}

		// Let us write the HTTP text based response received from the remote server to a file.
		() as BinaryHttpResponseSink = FileSink(BinaryPayloadSendResult) {
			param
				file: "http-binary-payload-send-result-" + 
					(rstring)jobID() + "-" + getHostName() + ".txt";
				flush: 1u;
		}
}

// Following is the test XML payload we are using above. (2.5KB in size)
/*
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:typ="http://www.ibm.com/wbe/casoap/types" xmlns:xs="http://www.w3.org/2001/XMLSchema">
   <soapenv:Header />
   <soapenv:Body>
      <typ:PowerOutageNotification>
         <EndDeviceEvent>
            <CorrelationID>41b405a6-5b56-45d1-a1f7-f209dc0a26b1</CorrelationID>
            <meterId>999_E_meter</meterId>
            <transformerId />
            <circuitId />
            <meterTimestamp>2020-01-13T00:24:51.078</meterTimestamp>
            <headendTimestamp>2020-01-13T00:24:51.079</headendTimestamp>
            <alarmType>3.26.1.185</alarmType>
            <alarmPayload>PG06TWV0ZXJBbGFybSB4bWxuczptPSJodHRwOi8vbWV0ZXJhbGFybS5lc20uZHRlY28uY29tL3YyIyI+PEhlYWRlciB4bWxucz0iaHR0cDovL2VzbS5kdGVjby5jb20vY29tbW9uL3YxIj48VmVyYj5jcmVhdGVkPC9WZXJiPjxOb3VuPkVuZERldmljZUV2ZW50PC9Ob3VuPjxUaW1lc3RhbXA+MjAyMC0wMS0xM1QwODoyNDo1MVo8L1RpbWVzdGFtcD48U291cmNlPkVTQjwvU291cmNlPjxNZXNzYWdlSUQ+MzY5M2Y2ZDktMTIzOC00YWNmLWEzMTQtZjIwOWRjMGE0YmQ0PC9NZXNzYWdlSUQ+PENvcnJlbGF0aW9uSUQ+NDFiNDA1YTYtNWI1Ni00NWQxLWExZjctZjIwOWRjMGEyNmIxPC9Db3JyZWxhdGlvbklEPjwvSGVhZGVyPjxFbmREZXZpY2VFdmVudHMgeG1sbnM9Imh0dHA6Ly9pZWMuY2gvVEM1Ny8yMDExL0VuZERldmljZUV2ZW50cyMiPjxFbmREZXZpY2VFdmVudD48Y3JlYXRlZERhdGVUaW1lPjIwMjAtMDEtMTNUMDA6MjQ6NTEuMDc5PC9jcmVhdGVkRGF0ZVRpbWU+PGlzc3VlcklEPkl0cm9uPC9pc3N1ZXJJRD48aXNzdWVyVHJhY2tpbmdJRD4xODAwMTwvaXNzdWVyVHJhY2tpbmdJRD48QXNzZXRzPjxtUklEPjk5OV9FX21ldGVyPC9tUklEPjxOYW1lcz48bmFtZT45OTlfRV9tZXRlcjwvbmFtZT48TmFtZVR5cGU+PGRlc2NyaXB0aW9uPkVsZWN0cm9uaWMgU2VyaWFsIE51bWJlcjwvZGVzY3JpcHRpb24+PG5hbWU+RVNOPC9uYW1lPjwvTmFtZVR5cGU+PC9OYW1lcz48L0Fzc2V0cz48RW5kRGV2aWNlRXZlbnREZXRhaWxzPjxuYW1lPlRyYW5zZm9ybWVySUQ8L25hbWU+PHZhbHVlIHJlZj0iIi8+PC9FbmREZXZpY2VFdmVudERldGFpbHM+PEVuZERldmljZUV2ZW50RGV0YWlscz48bmFtZT5DaXJjdWl0SUQ8L25hbWU+PHZhbHVlIHJlZj0iIi8+PC9FbmREZXZpY2VFdmVudERldGFpbHM+PEVuZERldmljZUV2ZW50RGV0YWlscz48bmFtZT5WZW5kb3JBbGFybUNhdGVnb3J5PC9uYW1lPjx2YWx1ZSByZWY9IlBvd2VyT3V0YWdlT3JSZXN0b3JhdGlvbiIvPjwvRW5kRGV2aWNlRXZlbnREZXRhaWxzPjxFbmREZXZpY2VFdmVudERldGFpbHM+PG5hbWU+VmVuZG9yQWxhcm1OYW1lPC9uYW1lPjx2YWx1ZSByZWY9IlByaW1hcnkgUG93ZXIgVXAiLz48L0VuZERldmljZUV2ZW50RGV0YWlscz48RW5kRGV2aWNlRXZlbnRUeXBlIHJlZj0iMy4yNi4xLjIxNiIvPjxzdGF0dXM+PGRhdGVUaW1lPjIwMjAtMDEtMTNUMDA6MjQ6NTEuMDc4PC9kYXRlVGltZT48L3N0YXR1cz48VXNhZ2VQb2ludD48bVJJRC8+PC9Vc2FnZVBvaW50PjwvRW5kRGV2aWNlRXZlbnQ+PC9FbmREZXZpY2VFdmVudHM+PC9tOk1ldGVyQWxhcm0+</alarmPayload>
         </EndDeviceEvent>
      </typ:PowerOutageNotification>
   </soapenv:Body>
</soapenv:Envelope>
*/


