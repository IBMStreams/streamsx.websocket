<?xml version="1.0" ?>
<operatorModel
  xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator" 
  xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/operator operatorModel.xsd">
  <cppOperatorModel>
    <context>
      <description>
      The server-based WebSocketSource operator is designed to receive 
      text (plain text, JSON or XML) or binary data from the remote WebSocket and HTTP clients. 
      This operator can also accept HTTP GET, HTTP PUT and HTTP POST requests from the remote HTTP clients.
      One or more remote clients can connect to this operator either via plain WebSocket/HTTP (ws or http) or
      via TLS WebSocket/HTTP (wss or https). For a TLS WebSocket/HTTP, a server side certificate must be
      generated first and the text file available in the etc directory of this toolkit provides 
      useful details on that topic. For a HTTP(S) GET/PUT/POST client to send text based data, it can have
      its Content-Type header as text/plain or application/xml or application/json. To send 
      binary based data, a HTTP(S) PUT/POST client must have its Content-Type header as 
      application/octet-stream and it can use a standard mechanism available in many web frameworks
      for including multipart MIME content. WebSocket connections established with this operator are
      always persistent and long running. HTTP connections established with this operator can also
      be made persistent (Keep-Alive) by configuring it to do so. Persistent (Keep-Alive) HTTP
      connections will be useful in improving throughput for non-browser based client applications with a 
      need to send data items iteratively in a tight loop.
            
      This operator can also be optionally configured to send an ack back to the remote WebSocket clients after receiving a
      certain number of data items (tuples) from a given client. This is configured by one of the operator parameters explained below.
      This feature can be used by a remote WebSocket client to wait for an ack after sending a certain number of data items.
      A missing ack can indicate the remote client about a server side network error or an operator crash/error and make that
      remote WebSocket client to retransmit the previously sent, but unacknowledged data items (tuples).
            
      This operator can be configured with a WebSocket server port number which is optional. If the user of this
      operator doesn't specify a WebSocket server port number, then a default port number of 443 will be used.
      
      This operator also provides an option for the client applications to do the HTTP/HTTPS GET/PUT/POST for
      sending text based data (plain text, JSON or XML). If this operator's allowHttpPost parameter is
      set to true, client applications can connect to this operator's HTTP/HTTPS URL endpoint and 
      send their data via HTTP/HTTPS GET, PUT and POST. This feature will be handy for the 
      traditional HTTP(S) based web applications that are not suitable for quick modernization to use 
      WebSocket instead of HTTP(S).
      
      Even though it is labeled as a source operator, it can be configured to perform like an 
      analytic operator to receive data from a client, process that data and send result/response back to 
      that client. More details about this feature can be found in a different section below.
      In addition, this operator can be configured to allow a certain maximum number of concurrent 
      connections from the remote clients depending on the needs of the application and based on the
      capacity of the underlying OS and hardware configuration such as networking, CPU cores and memory limits.
      
      Since WebSocket at its low level is based on TCP, you have to be aware of the 
      effects of the Nagle's algorithm which is usually controlled by TCP_NODELAY.
      This operator has an optional parameter named tcpNoDelay to enable or disable 
      Nagle's algorithm for your needs. The tcpNoDelay parameter will do its job 
      correctly only with the websocketpp library version 0.8.3 and higher.
      
      In summary, this operator supports data reception via both WebSocket and HTTP GET/PUT/POST on 
      plain as well as secure endpoints. Users will get a five-in-one benefit 
      (WebSocket, HTTP, plain, secure and roundtripping) from this operator.
      This is Receive-only from multiple clients with an option to make it a 
      Receive-Process-Send operator. This operator promotes Many-To-One data access pattern.
      
      By default, any remote client that knows the WebSocket URL of this operator can
      connect to this operator for sending and receiving data. If only a specific set of remote
      clients should be allowed to connect to this operator, an optional operator
      parameter named clientWhitelist can be used to provide a list&lt;rstring&gt; with
      one or more client IP addresses. An empty list means connections will be accepted
      from any client with no restrictions. A new whitelist can also be injected into this
      operator via an optional input port in the middle of an application run. On receiving
      such a new whitelist, this operator will start using it immediately and it will
      terminate its existing connections with those remote clients that are no longer
      specified in the whitelist. IP addresses can be exact or wildcard based as shown below.
      
      clientWhitelist: \["172.34.18.212", "10.5.23.17", "172.*.42.*", "10.29.42.*"\];
      
      This operator provides two output ports. On the first output port, it keeps sending the data
      received from the remote clients. On the second output port, it keeps sending the "End of Client Session"
      signal whenever a remote WebSocket client closes its connection. 
      Please refer to the output port section below to learn more.
            
      This operator provides two optional input ports. The presence of these two input ports are
      purely based on the needs of the application. They can be completely absent or only one of
      them can be present or both of them can be present. One of them is used to send response to a 
      remote client and the other is used to dynamically change the client whitelist as explained 
      in a previous paragraph. Please refer to the input port section below to learn more.
      
      Requirements: 
      * Intel RHEL6 or RHEL7 hosts installed with IBM Streams. 
      
      See the samples folder inside this toolkit for a working example that shows how to use this operator.
      
      For a detailed documentation about the operator design, usage patterns and in-depth technical
      details, please refer to the official websocket toolkit documentation available at this URL:
      
      [https://ibmstreams.github.io/streamsx.websocket]
      </description>

      <iconUri size="16">ibmwssource_16.gif</iconUri>
      <iconUri size="32">ibmwssource_32.gif</iconUri>
      
      <metrics>
        <metric>
          <name>nClientsConnected</name>
          <description>Number of remote clients currently connected to this operator instance.</description>
          <kind>Gauge</kind>
        </metric>
        
        <metric>
          <name>nDataItemsReceivedFromRemoteClients</name>
          <description>Number of data items received from the remote clients thus far.</description>
          <kind>Gauge</kind>
        </metric>

        <metric>
          <name>nDataBytesReceivedFromRemoteClients</name>
          <description>Total number of data bytes received by this operator instance.</description>
          <kind>Gauge</kind>
        </metric>
        
        <metric>
          <name>nHttpMessagesReceivedFromRemoteClients</name>
          <description>Number of HTTP GET, PUT and POST messages received by this operator instance.</description>
          <kind>Gauge</kind>
        </metric>
        
        <metric>
          <name>nDataItemsSentToRemoteClients</name>
          <description>Number of data items sent to the remote clients thus far.</description>
          <kind>Gauge</kind>
        </metric>

        <metric>
          <name>nDataBytesSentToRemoteClients</name>
          <description>Total number of data bytes sent to the remote clients thus far.</description>
          <kind>Gauge</kind>
        </metric>
        
        <metric>
          <name>nResponseTimeoutOccurrences</name>
          <description>Total number of response timeout occurrences thus far.</description>
          <kind>Gauge</kind>
        </metric>

        <metric>
          <name>nTlsPort</name>
          <description>TLS port number configured for this operator.</description>
          <kind>Gauge</kind>
        </metric>

        <metric>
          <name>nNonTlsPortNeeded</name>
          <description>Did the user configure to exchange data via a non-TLS port?</description>
          <kind>Gauge</kind>
        </metric>

        <metric>
          <name>nNonTlsPort</name>
          <description>Non-TLS port number configured for this operator.</description>
          <kind>Gauge</kind>
        </metric>

        <metric>
          <name>nHttpPostAllowed</name>
          <description>Does this operator allow HTTP GET/PUT/POST from clients?</description>
          <kind>Gauge</kind>
        </metric>
 
         <metric>
          <name>nTimeTakenToSendMostRecentDataItem</name>
          <description>Time taken in milliseconds to send the most recent data item to the remote server.</description>
          <kind>Gauge</kind>
        </metric>       

        <metric>
          <name>nSizeOfMostRecentDataItemSent</name>
          <description>Size of the most recent data item sent to the remote server.</description>
          <kind>Gauge</kind>
        </metric>       

        <metric>
          <name>nSizeOfMostRecentDataItemReceived</name>
          <description>Size of the most recent data item received from the remote server.</description>
          <kind>Gauge</kind>
        </metric>
       
        <metric>
          <name>nTcpNoDelay</name>
          <description>Did the user configure TCP_NODELAY for this operator?</description>
          <kind>Gauge</kind>
        </metric>    
      </metrics>

      <customOutputFunctions>
        <customOutputFunction>
          <name>WebSocketSourceFunctions</name>
          <function>
            <description>The default function for output attributes. This function assigns the output attribute to the value of the input attribute with the same name.</description>
            <prototype><![CDATA[<any T> T AsIs(T)]]></prototype> 
          </function>
          <function>
            <description>Returns an uint64 value indicating the client session id that corresponds to the current output tuple.</description>
            <prototype><![CDATA[uint64 getClientSessionId()]]></prototype>
          </function>      
          <function>
            <description>Returns an uint64 value indicating the total number of data items received so far from a remote client.</description>
            <prototype><![CDATA[uint64 getTotalDataItemsReceived()]]></prototype>
          </function>
          <function>
            <description>Returns an uint64 value indicating the total number of data bytes received so far from a remote client.</description>
            <prototype><![CDATA[uint64 getTotalDataBytesReceived()]]></prototype>
          </function>
          <function>
            <description>Returns an uint64 value indicating the total number of data items sent so far to a remote client.</description>
            <prototype><![CDATA[uint64 getTotalDataItemsSent()]]></prototype>
          </function>
          <function>
            <description>Returns an uint64 value indicating the total number of data bytes sent so far to a remote client.</description>
            <prototype><![CDATA[uint64 getTotalDataBytesSent()]]></prototype>
          </function>
          <function>
            <description>Returns a string indicating the IP address of a remote client.</description>
            <prototype><![CDATA[rstring getClientIpAddress()]]></prototype>
          </function>
           <function>
            <description>Returns a string indicating the port of a remote client.</description>
            <prototype><![CDATA[rstring getClientPort()]]></prototype>
          </function>
           <function>
            <description>Returns a string indicating the context path present in the URL being accessed by the client.</description>
            <prototype><![CDATA[rstring getUrlContextPath()]]></prototype>
          </function>
           <function>
            <description>Returns a boolean indicating whether a remote client holds a WebSocket connection.</description>
            <prototype><![CDATA[boolean isWebSocketClient()]]></prototype>
          </function>
           <function>
            <description>Returns a boolean indicating whether a remote client holds a Http connection.</description>
            <prototype><![CDATA[boolean isHttpClient()]]></prototype>
          </function>
           <function>
            <description>Returns an SPL map holding the HTTP headers that were part of a client's HTTP GET/PUT/POST request.</description>
            <prototype><![CDATA[map<rstring, rstring> getHttpRequestHeaders()]]></prototype>
          </function>
           <function>
            <description>Returns a string indicating the method name (GET, PUT or POST) found in the client's HTTP request.</description>
            <prototype><![CDATA[rstring getHttpRequestMethodName()]]></prototype>
          </function>
           <function>
            <description>Returns an SPL map holding the key/value pairs found in the URL query string of a client's HTTP GET request.</description>
            <prototype><![CDATA[map<rstring, rstring> getUrlQueryStringKeyValuePairs()]]></prototype>
          </function>
           <function>
            <description>Returns a string indicating the full URL being accessed by the remote client.</description>
            <prototype><![CDATA[rstring getFullUrlBeingAccessedByTheClient()]]></prototype>
          </function>
           <function>
            <description>Returns a string indicating the file name in the URL for HTTP GET based requests.</description>
            <prototype><![CDATA[rstring getFileNameInUrlForHttpGet()]]></prototype>
          </function>
		</customOutputFunction>
      </customOutputFunctions>

      <libraryDependencies>
        <library>
          <cmn:description>Boost Library</cmn:description>
          <cmn:managedLibrary>
            <cmn:lib>boost_system</cmn:lib>
            <cmn:lib>boost_chrono</cmn:lib>
            <cmn:lib>boost_random</cmn:lib>
            <cmn:lib>boost_thread</cmn:lib>
            <cmn:libPath>../../lib</cmn:libPath>
            <cmn:includePath>../../include</cmn:includePath>
          </cmn:managedLibrary>
        </library>
         
        <library>
          <cmn:description>Websocketpp Library</cmn:description>
          <cmn:managedLibrary>
            <cmn:includePath>../../include</cmn:includePath>
          </cmn:managedLibrary>
        </library>
      </libraryDependencies>
            
      <providesSingleThreadedContext>Never</providesSingleThreadedContext>
    </context>  
    
    <parameters>
      <allowAny>false</allowAny>
      
      <parameter>
        <name>tlsPort</name>
        <description>This parameter specifies the WebSocket TLS port number. Default port number is 443.</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>uint32</type>
        <cardinality>1</cardinality>
      </parameter> 
      
      <parameter>
        <name>certificateFileName</name>
        <description>This parameter specifies the full path of the WebSocket server's private key and public certificate holding PEM file name. Default is to read ws-server.pem from the etc sub-directory of the application that is invoking this operator.</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>

      <parameter>
        <name>certificatePassword</name>
        <description>This parameter specifies a password needed for decrypting the WebSocket server's private key in the PEM file. Default is an empty string.</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>

      <parameter>
        <name>trustedClientCertificateFileName</name>
        <description>This parameter specifies the full path of the PEM file name that can contain the public certificates of all the trusted clients. This allows for the client (mutual) authentication. If this parameter is not used or empty, then there will be no client authentication. (Default is an empty string.)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>

      <parameter>
        <name>trustedClientX509SubjectIdentifiers</name>
        <description>This parameter specifies a list of verifiable identifiers present in the subject field of the trusted client's public certificate. It is helpful in performing the client (mutual) authentication using the unsupported certificate types such as the self-signed ones. Some examples of such identifiers: \["ST=New York","L=Armonk","O=IBM","CN=www.ibm.com","emailAddress=websocket.streams@ibm.com"\] (Default is an empty list.)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>list&lt;rstring></type>
        <cardinality>1</cardinality>
      </parameter>

      <parameter>
        <name>nonTlsEndpointNeeded</name>
        <description>This parameter specifies whether a WebSocket (plain) non-TLS endpoint is needed. (Default is false)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>

      <parameter>
        <name>nonTlsPort</name>
        <description>This parameter specifies the WebSocket (plain) non-TLS port number. Default port number is 80.</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>uint32</type>
        <cardinality>1</cardinality>
      </parameter> 

      <parameter>
        <name>urlContextPath</name>
        <description>This parameter specifies a list with zero or more URL context path(s) for a given WebSocket server endpoint. Users can come up with any application-specific value(s) made of either a single or a multi-part path \[e-g: Orders (OR) MyServices/Banking/Deposit\]. With that example, WebSocket server URL should either be https://host:port/Orders (OR) https://host:port/MyServices/Banking/Deposit. Default is an empty list to indicate no url context path.</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>list&lt;rstring></type>
        <cardinality>1</cardinality>
      </parameter> 

      <parameter>
        <name>initDelay</name>
        <description>This parameter specifies a one time delay in seconds for which this source operator should wait before start generating its first tuple. Default delay is 0.0.</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>float64</type>
        <cardinality>1</cardinality>
      </parameter> 

      <parameter>
        <name>websocketLiveMetricsUpdateNeeded</name>
        <description>This parameter specifies whether live update for this operator's custom metrics is needed. (Default is true)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      
      <parameter>
        <name>websocketLoggingNeeded</name>
        <description>This parameter specifies whether logging is needed from the WebSocket library. (Default is false)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>

      <parameter>
        <name>wsConnectionLoggingNeeded</name>
        <description>This parameter specifies whether logging is needed when the remote clients connect and disconnect. (Default is false)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
            
      <parameter>
        <name>wsClientSessionLoggingNeeded</name>
        <description>This parameter specifies whether logging is needed when the remote client session is in progress with this operator. (Default is false)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      
      <parameter>
        <name>websocketStaleConnectionPurgeInterval</name>
        <description>This parameter specifies periodic time interval in seconds during which any stale remote client connection should be purged to free up memory usage. (Default is 0 i.e. no purging)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>uint32</type>
        <cardinality>1</cardinality>
      </parameter>
      
      <parameter>
        <name>ipv6Available</name>
        <description>This parameter indicates whether the ipv6 protocol stack is available in the Linux machine where the WebSocketSource operator is running. (Default is true)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      
      <parameter>
        <name>tcpNoDelay</name>
        <description>This parameter can be used to control the TCP Nagle's algorithm. Setting it to true will disable Nagle's algorithm and setting it to false will enable. (Default is false.)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      
      <parameter>
        <name>numberOfMessagesToReceiveBeforeAnAck</name>
        <description>This parameter indicates how many messages are to be received before sending an ack to the remote client. (Default is 0 i.e. no ack sent)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>uint32</type>
        <cardinality>1</cardinality>
      </parameter>

      <parameter>
        <name>allowHttpPost</name>
        <description>This parameter indicates whether the client applications are allowed to send data via HTTP(S) GET/PUT/POST. (Default is false)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      
      <parameter>
        <name>newDataCpuYieldTimeInSenderThread</name>
        <description>This parameter specifies the CPU yield time (in partial seconds) needed inside the thread that is just about to send a new data item to the remote clients. It should be >= 0.0 (Default is 0.001 i.e. 1 millisecond)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>float64</type>
        <cardinality>1</cardinality>
      </parameter>
      
      <parameter>
        <name>noDataCpuYieldTimeInSenderThread</name>
        <description>This parameter specifies the CPU yield time (in partial seconds) needed inside the thread that spin loops when no data is available to send to the remote clients. It should be >= 0.0 (Default is 0.001 i.e. 1 millisecond)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>float64</type>
        <cardinality>1</cardinality>
      </parameter>
      
      <parameter>
        <name>clientWhitelist</name>
        <description>This parameter specifies a list of client IP addresses to accept connections only from those clients. (Default is an empty list to have no client connection restrictions.)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>list&lt;rstring></type>
        <cardinality>1</cardinality>
      </parameter>
      
      <parameter>
        <name>maxClientConnectionsAllowed</name>
        <description>This parameter specifies the maximum number of concurrent clients allowed to connect with this operator. After this limit is reached, new client connections will be denied until any existing clients close their connections. (Default is 32.)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>uint32</type>
        <cardinality>1</cardinality>
      </parameter>
      
      <parameter>
        <name>responseTimeout</name>
        <description>This parameter specifies the time in seconds before which the application logic should send its pending response to a remote client. If this time expires, a timeout handler thread in this operator will do the necessary internal clean-up work. (Default is 20 seconds.)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>uint32</type>
        <cardinality>1</cardinality>
      </parameter>
      
      <parameter>
        <name>allowPersistentHttpConnections</name>
        <description>This parameter indicates whether this operator will allow the client applications to make persistent (Keep-Alive) HTTP connections. It is better to allow this only for non-browser based client applications. (Default is false)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      
      <parameter>
        <name>tlsCipherWhitelist</name>
        <description>This parameter can be used to specify a string containing one or more comma separated TLS/SSL ciphers that should be used during TLS/SSL connection negotiations with clients. It is handy when there is a need to avoid using ciphers that are found to have security vulnerabilities. (Default is an empty string.)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      
      <parameter>
        <name>metricsResetInterval</name>
        <description>This parameter can be used to specify a non-zero periodic time interval in minutes after which all the metrics counters will be reset to 0. (Default is 0 which will never reset the metrics counters.)</description>
        <optional>true</optional>
        <rewriteAllowed>true</rewriteAllowed>
        <expressionMode>AttributeFree</expressionMode>
        <type>uint32</type>
        <cardinality>1</cardinality>
      </parameter>
    </parameters>

    <inputPorts>
      <inputPortSet>
      	<description>
      	Even though this operator is labeled as a source, it can optionally be configured to
        function like an analytic operator. In this changed role, it will accept an input port
        to receive tuples and send them to the remote clients. In addition, this operator can
        also have another optional port to receive a client whitelist and dynamically update it
        inside this operator for allowing or rejecting connections from remote clients.
        To meet that requirement, this operator provides two optional input ports. 
        The presence of these two input ports are purely based on the needs of the application. 
        They can be completely absent or only one of them can be present or both of them can be 
        present. One of them is used to send response to a remote client and the other is used to 
        dynamically change the client whitelist. That is why it is not possible to impose a 
        particular ordering between them. These input ports can be used in any order and the 
        internal operator logic knows how to identify which is which. 
      
        This is one of those two input ports. It is used for an application to send data to a 
        remote WebSocket client as a response to the data it received earlier from that client
        and finished processing it. This input port must have either rstring strData or 
        blob blobData or both of them and uint64 clientSessionId as the tuple attribute(s). 
        By using the client session id, this operator will correlate to find the correct 
        remote client to where a given response should be sent. If HTTP based remote clients
        are sending data to this operator, application logic can send its own custom
        HTTP response headers back to those HTTP clients. In order to do that, this
        input port can have an optional attribute map&lt;rstring, rstring&gt; httpResponseHeaders
        which the application logic can populate with its custom HTTP headers. When this input port is
        present, it is required for the application logic to send a (round-trip) response 
        back to the client from where it received a data item. Such a response should be sent as
        quick as possible before the configured response timeout value. If not, a timeout handler
        thread running inside this operator will detect that missed reponse and do the necessary 
        clean-up work for the remote client connection that is waiting for a response.  
      	      	
      	Attributes on this input port:
		* **strData** (required, rstring) - Any text based data (plain text, JSON or XML) can be sent to the remote WebSocket clients via this attribute.
		* **blobData** (required, blob) - Any binary (blob) data can be sent to the remote WebSocket clients via this attribute.
		* **clientSessionId** (required, uint64) - Client session id to where a given response should be sent.
		* **httpResponseHeaders** (optional, map&lt;rstring, rstring&gt;) - This map attribute can be present if the application logic has to send custom HTTP response headers to a remote HTTP client. 
        
		All the extra input attributes will be ignored.  	
      	</description>
        <tupleMutationAllowed>true</tupleMutationAllowed>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
      	<cardinality>1</cardinality>
      	<optional>true</optional>
      </inputPortSet>
      
      <inputPortSet>
      	<description>
        This is the other optional input port. It is used to send a new client whitelist 
        into this operator to accept client connections only from the specified IP addresses. 
        This input port must have only one attribute named clientWhitelist that is of 
        type list&lt;rstring&gt;. This can be an empty list for accepting connections from 
        any client with no restrictions or a list with one or more remote client IP addresses 
        that are allowed to connect with this operator to send and receive data.
      	
      	Attributes on this input port:
		* **clientWhitelist** (required, list&lt;rstring>) - An empty list or a list of client IP addresses that are allowed to connect to this operator.
        
		All the extra input attributes will be ignored.  	
		
		As mentioned in the description for the other input port, ordering of these two ports can be
		at the discretion of the application developers. 
      	</description>
        <tupleMutationAllowed>true</tupleMutationAllowed>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
      	<cardinality>1</cardinality>
      	<optional>true</optional>
      </inputPortSet>
    </inputPorts>
        
    <outputPorts>
      <outputPortSet>
      	<description>
      	This port produces the output tuples that carry the text or binary data received from 
      	the remote WebSocket or HTTP GET/PUT/POST client. The schema for this port must either have an attribute named 
      	strData with an rstring data type to hold the received text data or an attribute named
      	blobData with a blob data type to hold the received binary data or both. Remaining attributes can be 
      	of any type based on the needs of the application. This operator is capable of sending out data
		received from multiple WebSocket and HTTP GET/PUT/POST clients that can all communicate with this operator at the very same time. 
		Please refer to the custom output functions provided by this operator to query the client session id
		and other client session specific metrics and assign such values to other optional attributes in this
		output port. Depending on the needs of a given application, this operator can perform more beyond being
		just a source operator. If applications are interested in receiving data from a remote client, process and
		then send a result a.k.a response back to that client, then this output port must have an additional 
		attribute uint64 clientSessionId. As mentioned earlier, the value of this attribute can be queried by using 
		a custom output function. When using this operator to send a result back to a client, there must be an
		input port present in this operator that has its own attribute uint64 clientSessionId. Application developers can
		arrange their application logic to receive data from a client, process it and then send a result along with the
		client session id for that client. This attribute present in both the input and output ports will let this
		operator to do the correlation of the result/response with the correct client before sending it to that client.
      	
        **There are multiple available output functions**, and output attributes can also be 
        assigned values with any SPL expression that evaluates to the proper type.      	
      	</description>
        <expressionMode>Expression</expressionMode> 
        <autoAssignment>false</autoAssignment>
        <completeAssignment>false</completeAssignment>
        <rewriteAllowed>true</rewriteAllowed>
        <outputFunctions>
            <default>AsIs</default>
            <type>WebSocketSourceFunctions</type>
        </outputFunctions> 
        <windowPunctuationOutputMode>Free</windowPunctuationOutputMode>
        <tupleMutationAllowed>true</tupleMutationAllowed>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </outputPortSet> 
      
      <outputPortSet>
      	<description>
      	This port produces periodic output tuples to give an indication about the end of a 
      	specific WebSocket client session that was in progress moments ago for 
      	the given client session id. The schema for this port must have one  
      	attribute with its correct data type as shown here. 
      	uint64 clientSessionId
      	This source operator will set the appropriate value for this attribute to 
      	indicate which particular WebSocket client  
      	(i.e. session id) just ended the data exchange. Downstream operators can make 
      	use of this "End Of Client Session" signal as they see fit.
      	</description>
        <expressionMode>Expression</expressionMode> 
        <autoAssignment>false</autoAssignment>
        <completeAssignment>false</completeAssignment>
        <rewriteAllowed>true</rewriteAllowed>
        <windowPunctuationOutputMode>Free</windowPunctuationOutputMode>
        <tupleMutationAllowed>false</tupleMutationAllowed>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </outputPortSet>          
    </outputPorts>
  </cppOperatorModel>
</operatorModel>
